# -*- coding: utf-8 -*-
"""Tarea 4.1. Derivadas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nqiS_AyGxkVE7uQbd_3yJGRzaaDbVA4g

Ejercicio 1
"""

import numpy as np
import matplotlib.pyplot as plt

# Función a derivar
def f(x):
    return np.sin(x)

# Derivada exacta para comparar
def df_analytical(x):
    return np.cos(x)

# Diferencia hacia adelante
def forward_diff(f, x, h=0.1):
    return (f(x + h) - f(x)) / h

# Diferencia hacia atrás
def backward_diff(f, x, h=0.1):
    return (f(x) - f(x - h)) / h

# Diferencia centrada
def central_diff(f, x, h=0.1):
    return (f(x + h) - f(x - h)) / (2*h)

# Intervalo de evaluación
a = 0.0
b = np.pi
x_vals = np.linspace(a, b, 100)

# Derivada exacta
df_exact = df_analytical(x_vals)

# Derivadas aproximadas
df_forward = forward_diff(f, x_vals)
df_backward = backward_diff(f, x_vals)
df_central = central_diff(f, x_vals)

# Cálculo de errores
error_forward = np.abs(df_forward - df_exact)
error_backward = np.abs(df_backward - df_exact)
error_central = np.abs(df_central - df_exact)

# Gráfica de las derivadas
plt.figure(figsize=(10, 6))
plt.plot(x_vals, f(x_vals), '-', color='#6a0dad', label='Función')
plt.plot(x_vals, df_exact, '-', color='#000000', label='Derivada exacta')
plt.plot(x_vals, df_forward, '--', color='#FF5733', label='Hacia adelante')
plt.plot(x_vals, df_backward, '-.', color='#2E8B57', label='Hacia atrás')
plt.plot(x_vals, df_central, ':', color='#1E90FF', label='Centrada')
plt.xlabel('x')
plt.ylabel("Derivada")
plt.legend()
plt.title("Comparación de Métodos de Diferenciación Numérica")
plt.grid()
plt.savefig("diferenciacion_aproximaciones.png")
plt.show()

# Gráfica de los errores
plt.figure(figsize=(10, 6))
plt.plot(x_vals, error_forward, '--', color='#FF5733', label='Error Hacia adelante')
plt.plot(x_vals, error_backward, '-.', color='#2E8B57', label='Error Hacia atrás')
plt.plot(x_vals, error_central, ':', color='#1E90FF', label='Error Centrada')
plt.xlabel('x')
plt.ylabel("Error absoluto")
plt.legend()
plt.title("Errores en Diferenciación Numérica")
plt.grid()
plt.savefig("diferenciacion_errores.png")
plt.show()

"""Ejercicio 2"""

import numpy as np
import matplotlib.pyplot as plt

# Función a derivar
def f(x):
    return np.exp(x)

# Derivada exacta
def df_analytical(x):
    return np.exp(x)

# Diferencia hacia adelante
def forward_diff(f, x, h=0.05):
    return (f(x + h) - f(x)) / h

# Diferencia hacia atrás
def backward_diff(f, x, h=0.05):
    return (f(x) - f(x - h)) / h

# Diferencia centrada
def central_diff(f, x, h=0.05):
    return (f(x + h) - f(x - h)) / (2*h)

# Intervalo
a = 0.0
b = 2.0
x_vals = np.linspace(a, b, 100)

# Derivada exacta
df_exact = df_analytical(x_vals)

# Derivadas aproximadas
df_forward = forward_diff(f, x_vals)
df_backward = backward_diff(f, x_vals)
df_central = central_diff(f, x_vals)

# Errores
error_forward = np.abs(df_forward - df_exact)
error_backward = np.abs(df_backward - df_exact)
error_central = np.abs(df_central - df_exact)

# Gráfica de derivadas
plt.figure(figsize=(10, 6))
plt.plot(x_vals, f(x_vals), '-', color='#6a0dad', label='Función')
plt.plot(x_vals, df_exact, '-', color='#000000', label='Derivada exacta')
plt.plot(x_vals, df_forward, '--', color='#FF5733', label='Hacia adelante')
plt.plot(x_vals, df_backward, '-.', color='#2E8B57', label='Hacia atrás')
plt.plot(x_vals, df_central, ':', color='#1E90FF', label='Centrada')
plt.xlabel('x')
plt.ylabel("Derivada")
plt.legend()
plt.title("Comparación de Métodos de Diferenciación Numérica")
plt.grid()
plt.savefig("diferenciacion_aproximaciones.png")
plt.show()

# Gráfica de errores
plt.figure(figsize=(10, 6))
plt.plot(x_vals, error_forward, '--', color='#FF5733', label='Error Hacia adelante')
plt.plot(x_vals, error_backward, '-.', color='#2E8B57', label='Error Hacia atrás')
plt.plot(x_vals, error_central, ':', color='#1E90FF', label='Error Centrada')
plt.xlabel('x')
plt.ylabel("Error absoluto")
plt.legend()
plt.title("Errores en Diferenciación Numérica")
plt.grid()
plt.savefig("diferenciacion_errores.png")
plt.show()

"""Ejercicio 3"""

import numpy as np
import matplotlib.pyplot as plt

# Función a derivar
def f(x):
    return x**3 - 2*x**2 + x

# Derivada exacta
def df_analytical(x):
    return 3*x**2 - 4*x + 1

# Diferencia hacia adelante
def forward_diff(f, x, h=0.2):
    return (f(x + h) - f(x)) / h

# Diferencia hacia atrás
def backward_diff(f, x, h=0.2):
    return (f(x) - f(x - h)) / h

# Diferencia centrada
def central_diff(f, x, h=0.2):
    return (f(x + h) - f(x - h)) / (2*h)

# Intervalo
a = -1.0
b = 2.0
x_vals = np.linspace(a, b, 100)

# Derivada exacta
df_exact = df_analytical(x_vals)

# Derivadas aproximadas
df_forward = forward_diff(f, x_vals)
df_backward = backward_diff(f, x_vals)
df_central = central_diff(f, x_vals)

# Errores
error_forward = np.abs(df_forward - df_exact)
error_backward = np.abs(df_backward - df_exact)
error_central = np.abs(df_central - df_exact)

# Gráfica de derivadas
plt.figure(figsize=(10, 6))
plt.plot(x_vals, f(x_vals), '-', color='#6a0dad', label='Función')
plt.plot(x_vals, df_exact, '-', color='#000000', label='Derivada exacta')
plt.plot(x_vals, df_forward, '--', color='#FF5733', label='Hacia adelante')
plt.plot(x_vals, df_backward, '-.', color='#2E8B57', label='Hacia atrás')
plt.plot(x_vals, df_central, ':', color='#1E90FF', label='Centrada')
plt.xlabel('x')
plt.ylabel("Derivada")
plt.legend()
plt.title("Comparación de Métodos de Diferenciación Numérica")
plt.grid()
plt.savefig("diferenciacion_aproximaciones.png")
plt.show()

# Gráfica de errores
plt.figure(figsize=(10, 6))
plt.plot(x_vals, error_forward, '--', color='#FF5733', label='Error Hacia adelante')
plt.plot(x_vals, error_backward, '-.', color='#2E8B57', label='Error Hacia atrás')
plt.plot(x_vals, error_central, ':', color='#1E90FF', label='Error Centrada')
plt.xlabel('x')
plt.ylabel("Error absoluto")
plt.legend()
plt.title("Errores en Diferenciación Numérica")
plt.grid()
plt.savefig("diferenciacion_errores.png")
plt.show()